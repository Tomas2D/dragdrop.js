{"version":3,"sources":["../src/dragdrop.js"],"names":["Dragdrop","elements","getElements","params","treatParams","targets","document","querySelectorAll","element","orders","onInit","forEach","call","target","childNodes","length","child","tagName","elementId","getAttribute","order","parseInt","push","Object","assign","mergeElements","event","childs","parentId","dataTransfer","getData","$parent","getElementById","appendChild","index","setAttribute","id","drop","dragover","dragleave","dragend","dragstart","addEventListener","parent","parentNode","setData","self","el","changePosition","classList","contains","add","getOrders","preventDefault","remove","dispatchEventsTarget","dispatchEventsElements"],"mappings":"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","file":"dragdrop.js","sourcesContent":["/**\r\n * Dragdrop.js\r\n * @author Guilherme Modugno - https://modugno.github.io \r\n * @description DragDrop Elements\r\n */\r\nclass Dragdrop {\r\n\r\n    constructor(...params) {\r\n        this.elements = this.getElements();\r\n        this.treatParams(params);\r\n        this.targets  = document.querySelectorAll(this.elements.targets);\r\n        this.elements = document.querySelectorAll(this.elements.element);\r\n        this.orders = [];\r\n        this.onInit();\r\n    }\r\n\r\n    /**\r\n     * Get Elements Mock\r\n     */\r\n    getElements() {\r\n        return {\r\n            element: '.dragdrop',\r\n            targets: '.dragdrop-target'\r\n        }        \r\n    }\r\n\r\n    /**\r\n     * Build and Get the order of elements \r\n     */\r\n    getOrders() {\r\n        this.orders = [];\r\n        [].forEach.call(this.targets, (target) => {\r\n            if (target.childNodes.length) {  \r\n                target.childNodes.forEach(child => {\r\n                    if (child.tagName) {\r\n                        let elementId = child.getAttribute('data-id') || 0\r\n                        let order     = parseInt( target.getAttribute('dragdrop-order') );\r\n                        this.orders.push({ elementId: elementId, order: order })\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Merge elements\r\n     * @param {Object} elements \r\n     */\r\n    mergeElements(elements) {\r\n        Object.assign(this.elements, elements);\r\n    }\r\n\r\n    /**\r\n     * Treat the params of constructor\r\n     * @param {Array} params \r\n     */\r\n    treatParams(params) {\r\n        if (params.length == 1) {\r\n            if (typeof params[0] === 'object') {\r\n                this.mergeElements(params[0]);\r\n            } else if (typeof params[0] === 'function') {\r\n                params[0](document, this);\r\n            }\r\n        } \r\n        else if ((params.length > 1) && (typeof params[0] == 'object')) {\r\n            this.mergeElements(params[0]);\r\n            params[1](document, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change position of elements\r\n     * @param {Event} event \r\n     * @param {NodeList|HTMLElement} childs \r\n     */\r\n    changePosition(event, childs) {\r\n        if (childs.length) {\r\n            let parentId = event.dataTransfer.getData('parent');\r\n            let $parent = document.getElementById(parentId);\r\n            \r\n            childs.forEach(child => {\r\n                if (child.tagName) {\r\n                    $parent.appendChild(child);\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispatch events of targets\r\n     */\r\n    dispatchEventsTarget() {\r\n        let index = 1;\r\n        [].forEach.call(this.targets, (target) => {\r\n            target.setAttribute('dragdrop', 'target');\r\n            target.setAttribute('dragdrop-order', index);\r\n            target.id = `dragdrop-target-${index}`;\r\n            \r\n            this.drop(target);\r\n            this.dragover(target);\r\n            this.dragleave(target);\r\n            this.dragend(target);\r\n\r\n            index++;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispatch events of elements\r\n     */\r\n    dispatchEventsElements() {\r\n        let index = 1;\r\n        [].forEach.call(this.elements, (element) => {\r\n            element.setAttribute('dragdrop', 'element');\r\n            element.setAttribute('draggable', 'true');\r\n            element.id = `dragdrop-${index}`;\r\n\r\n            this.dragstart(element);\r\n\r\n            index++;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * When event Dragstart is called\r\n     * @param {NodeList|HTMLElement} element \r\n     */\r\n    dragstart(element) {\r\n        element.addEventListener('dragstart', function(event) {\r\n            let parent = this.parentNode;\r\n            event.dataTransfer.setData('parent', parent.id);\r\n            event.dataTransfer.setData('text/plain', this.id);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * When event Drop is called\r\n     * @param {NodeList|HTMLElement} target \r\n     */\r\n    drop(target) {\r\n        let self = this;\r\n        target.addEventListener('drop', function(event) {\r\n            let id = event.dataTransfer.getData('text');\r\n            let el = document.getElementById(id);\r\n            \r\n            self.changePosition(event, this.childNodes);\r\n            this.appendChild(el);\r\n    \r\n            if (!this.classList.contains('over')) {\r\n                this.classList.add('over');\r\n            }\r\n            \r\n            self.getOrders();\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * When event Dragover is called\r\n     * @param {NodeList|HTMLElement} target \r\n     */\r\n    dragover(target) {\r\n        target.addEventListener('dragover', function(event) {\r\n            event.preventDefault();\r\n            if (!this.classList.contains('over')) {\r\n                this.classList.add('over');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * When event Dragleave is called\r\n     * @param {NodeList|HTMLElement} target \r\n     */\r\n    dragleave(target) {\r\n        target.addEventListener('dragleave', function(event) {\r\n            if (this.classList.contains('over')) {\r\n                this.classList.remove('over');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * When event Dragend is called\r\n     * @param {NodeList|HTMLElement} target \r\n     */\r\n    dragend(target) {\r\n        target.addEventListener('dragend', function(event) {\r\n            if (this.classList.contains('over')) {\r\n                this.classList.remove('over');\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * On Init\r\n     */\r\n    onInit() {\r\n        this.dispatchEventsTarget();\r\n        this.dispatchEventsElements();\r\n        this.getOrders();\r\n    }\r\n    \r\n}\r\n"]}